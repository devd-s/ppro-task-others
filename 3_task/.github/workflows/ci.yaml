name: CI/CD Pipeline for QA and Prod

on:
  push:
    branches:
      - main        # Trigger on main branch for prod
      - qa          # Trigger on qa branch for QA
  pull_request:
    branches:
      - main
      - qa

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Setting up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub or GitHub Container Registry
      - name: Logging in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Setting this as secret in GitHub
          password: ${{ secrets.DOCKER_PASSWORD }}  # Setting this as secret in GitHub

      # Step 4: Building and pushing Docker image and retrieving the SHA
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
        id: docker_build

      # Step 5: Capture the image SHA to update the values.yaml dynamically
      - name: Capturing Image SHA
        run: |
          echo "IMAGE_SHA=${{ steps.docker_build.outputs.digest }}" >> $GITHUB_ENV

  validate-manifests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Installing Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Step 3: Set environment based on branch (prod or qa)
      - name: Set environment
        id: env-setup
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "env=prod" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            echo "env=qa" >> $GITHUB_ENV
          fi

      # Step 4: Generate Kubernetes Manifests using Helm for the selected environment
      - name: Generating Kubernetes Manifests
        run: |
          helm template my-app ./charts/nginx-chart \
          -f environments/${{ env.env }}/values-${{ env.env }}.yaml \
          --set image.tag=${{ env.IMAGE_SHA }} > generated-manifests.yaml

      # Step 5: Validate Kubernetes manifests using kubeval (or similar tool)
      - name: Validating Manifests with kubeval
        run: |
          curl -sSL https://github.com/instrumenta/kubeval/releases/download/v0.16.1/kubeval-linux-amd64.tar.gz | tar xz
          ./kubeval generated-manifests.yaml

  deploy-to-env:
    runs-on: ubuntu-latest
    needs: validate-manifests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Installing kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Step 2: Setting up Kind Cluster (for local testing)
      - name: Setup Kind Cluster
        uses: engineerd/setup-kind@v0.5.0

      # Step 3: Applying K8s Manifests
      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f generated-manifests.yaml

      # Step 4: Waiting for pods to be ready
      - name: Wait for Pods to be Ready
        run: |
          kubectl wait --for=condition=ready pod -l app=my-app --timeout=120s

  deploy-to-qa-cluster:
    runs-on: ubuntu-latest
    needs: validate-manifests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Setting up kubeconfig for QA cluster
      - name: Set up kubeconfig for QA
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.QA_KUBECONFIG }}" > $HOME/.kube/config

      # Step 2: Installing kubectl for deploying to QA cluster
      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Step 3: Applying Kubernetes Manifests to QA cluster
      - name: Apply Kubernetes Manifests to QA Cluster
        run: |
          kubectl apply -f generated-manifests.yaml --context qa-cluster-context

      # Step 4: Ensuring that pods come up healthy in QA
      - name: Wait for Pods to be Ready in QA
        run: |
          kubectl wait --for=condition=ready pod -l app=my-app --timeout=120s --context qa-cluster-context
